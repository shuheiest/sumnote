generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      String   @default("user")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  documents Document[]
  audios    Audio[]
  comments  Comment[]

  @@map("users")
}

model Document {
  id          String   @id @default(cuid())
  title       String
  description String?
  fileName    String
  filePath    String
  fileSize    Int
  mimeType    String
  uploadedBy  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User      @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)
  comments Comment[]

  @@map("documents")
}

model Audio {
  id          String   @id @default(cuid())
  title       String
  description String?
  fileName    String
  filePath    String
  fileSize    Int
  duration    Int?
  mimeType    String
  uploadedBy  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User      @relation(fields: [uploadedBy], references: [id], onDelete: Cascade)
  comments Comment[]

  @@map("audios")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  documentId String?
  audioId    String?

  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  document Document? @relation(fields: [documentId], references: [id], onDelete: Cascade)
  audio    Audio?    @relation(fields: [audioId], references: [id], onDelete: Cascade)

  @@map("comments")
}